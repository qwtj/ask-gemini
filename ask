#!/usr/bin/env zsh

# Function to display help
usage() {
    echo "Usage: $0 <prompt> [-m <model name>] [-g][-f <attached_File>]"
    echo "  <prompt>: The text prompt to send to the Gemini API.  If -g is used, this is the initial prompt."
    echo "  -p <prompt path>     Provide a path to a file prompt."
    echo "  -s: Enable Google Search for the prompt."
    echo "  -v: Enable verbose mode."
    echo "  -h, --help: Display this help message."
    echo "  -m <model name>: Specify the model (e.g., gemini-2.0-flash, gemini-1.5-pro, etc.)"
    echo "  Supported models: gemini-2.0-flash, gemini-2.0-flash-lite, gemini-1.5-flash, gemini-1.5-flash-8b, gemini-1.5-pro"
    echo "  -g: Use glow to display the output."
    echo "  -f <attached_File>:  Path to a file to include in the request."
    echo "  -i: List all models along with their details"
    exit 1
}

# ---------------------------
# Function: get_models_info
# ---------------------------
get_models_info() {
    local RESPONSE="$(curl -s https://generativelanguage.googleapis.com/v1beta/models\?key\=$GOOGLE_API_KEY | jq)"
    if [[ -z "$RESPONSE" ]]; then
        echo "Error: Unable to retrieve model information. Check your API key and network connection." >&2
        exit 1
    fi
    echo "$RESPONSE"
}

# ---------------------------
# Function: list_model_names
# ---------------------------
list_model_names() {
    local RESPONSE="$(curl -s "https://generativelanguage.googleapis.com/v1beta/models?key=$GOOGLE_API_KEY" | jq -r '.models[].name' | sed 's/models\///g')"
    if [[ -z "$RESPONSE" ]]; then
        echo "Error: Unable to retrieve model information. Check your API key and network connection." >&2
        exit 1
    fi
    echo "$RESPONSE"
}

# ---------------------------
# Function: send_gemini_request
# ---------------------------
send_gemini_request() {
    local MODEL="$1"
    local VERBOSE="$2"
    local REQ_FILE="$3"
    # Default API version not version 1.5 or below
    local API_VERSION="v1beta" 

    case "$MODEL" in
        gemini-1.5-*) API_VERSION="v1" ;;
        *) ;;
    esac
    local API_URL="https://generativelanguage.googleapis.com/${API_VERSION}/models/${MODEL}:generateContent?key=$GOOGLE_API_KEY"

    [[ "$VERBOSE" = "true" ]] && echo "\nSending Request:\n\n\tAPI URL: $API_URL" >&2
    # Send request and base64 encode response
    local RESPONSE=$(curl -s -X POST "$API_URL" \
        -H "Content-Type: application/json" \
        --data-binary "@${REQ_FILE}" | base64)
    if [[ "$VERBOSE" = "false" ]]; then
        rm "${REQ_FILE}"
    else
        RESPONSE_FILE="$(mktemp -t "ask.google")"
        echo "$RESPONSE" | base64 --decode | jq > "$RESPONSE_FILE"
        echo "\nRequest saved: ${REQ_FILE}" >&2
        echo "Response saved to: ${RESPONSE_FILE}" >&2
    fi
    if ! echo "$RESPONSE" | base64 --decode | jq . >/dev/null 2>&1; then
        echo "Invalid JSON response:" >&2
        echo "$RESPONSE" | base64 --decode >&2
        return 1
    fi

    local TEXT_RESPONSE=$(echo "$RESPONSE" | base64 --decode | jq -r '.candidates[0].content.parts[] | .text' 2>/dev/null)

    if [ "$TEXT_RESPONSE" = "null" ]; then
      echo "Finish Result: $(echo "$RESPONSE" | base64 --decode | jq)"
      return 1
    fi

    # Check if the response is empty or null
    if [ -z "$TEXT_RESPONSE" ]; then
        echo "No text response received." >&2
        return 1
    fi
    
    echo "$TEXT_RESPONSE" | base64
}

send_prompt_to_gemini() {
    local ENCODED_PROMPT="$1"
    local SEARCH="$2"
    local MODEL="$3"
    local VERBOSE="$4"

     # Add prompt
    local PARTS_ARRAY=()
    PARTS_ARRAY+=("{\"inline_data\": {\"mime_type\":\"text/plain\", \"data\":\"$ENCODED_PROMPT\"}}")

    [[ "$VERBOSE" = "true" ]] && echo "Adding prompt to request body..." >&2

    local REQ_BODY
    # Construct request
    if [ "$SEARCH" = "true" ]; then
        REQ_BODY="{\"contents\":[{\"parts\":[${(j:, :)PARTS_ARRAY}]}],\"tools\": [{\"google_search\": {}}]}"
     else
        REQ_BODY="{\"contents\":[{\"parts\":[${(j:, :)PARTS_ARRAY}]}]}"
    fi
    TMP_FILE="$(mktemp -t "ask.google")"
    echo "$REQ_BODY" > "$TMP_FILE"
    send_gemini_request "$MODEL" "$VERBOSE"  "$TMP_FILE"
}

send_prompt_with_file_to_gemini() {
    local ENCODED_PROMPT="$1"
    local SEARCH="$2"
    local ATTACHED_FILE_PATH="$3"
    local MIME_TYPE="$(file -b --mime-type "$ATTACHED_FILE_PATH")"
    local MODEL="$4"
    local VERBOSE="$5"

    # Add prompt
    local PARTS_ARRAY=()
    PARTS_ARRAY+=("{\"inline_data\": {\"mime_type\":\"text/plain\", \"data\":\"$ENCODED_PROMPT\"}}")

     # Add file if provided
    if [ -n "$ATTACHED_FILE_PATH" ]; then
        if [ ! -f "$ATTACHED_FILE_PATH" ]; then
            echo "Error: File not found: $ATTACHED_FILE_PATH" >&2
            return 1
        fi
        local FILE_BASE64=$(base64 -i "$ATTACHED_FILE_PATH" | tr -d '\r\n')
        PARTS_ARRAY+=("{\"inline_data\": {\"mime_type\":\"$MIME_TYPE\", \"data\":\"$FILE_BASE64\"}}")
    fi

    local REQ_BODY
    # Construct request
    if [ "$SEARCH" = "true" ]; then
        REQ_BODY="{\"contents\":[{\"parts\":[${(j:, :)PARTS_ARRAY}]}],\"tools\": [{\"google_search\": {}}]}"
     else
        REQ_BODY="{\"contents\":[{\"parts\":[${(j:, :)PARTS_ARRAY}]}]}"
    fi
    TMP_FILE="$(mktemp -t "ask.google")"
    echo "$REQ_BODY" > "$TMP_FILE"
    send_gemini_request "$MODEL" "$VERBOSE" "$TMP_FILE"
}

# ---------------------------
# Function: parse_arguments
# ---------------------------
parse_arguments() {
    local USE_GLOW="false"
    local MODEL="gemini-2.0-flash"  # Default model
    local ATTACHED_FILE="" # Initialize attached_File
    local VERBOSE="false"
    local SEARCH="false"
    local PROMPT=""

    while [ "$#" -gt 0 ]; do
        case "$1" in
            -p) shift
                if [ -z "$1" ]; then
                    echo "Error: -p requires a prompt"
                    exit 1
                fi
                PROMPT="$(cat "$1")"
                shift
                ;;
            -h|--help)
                usage
                ;;
            -m)
                shift
                if [ -z "$1" ]; then
                    echo "Error: -m requires a model name" >&2
                    usage
                fi
                # Validate the provided model against the list from the API.
                valid_models=$(list_model_names)
                if [ -z "$valid_models" ]; then
                    echo "Error: Unable to retrieve valid model names." >&2
                    exit 1
                fi
                if echo "$valid_models" | grep -Fxq "$1"; then
                    MODEL="$1"
                else
                    echo "Error: Unsupported model '$1'. Valid models are:" >&2
                    echo "$valid_models"
                    exit 1
                fi
                ;;
            -g) USE_GLOW="true" ;;
            -f) # Handle the -f option
                shift
                ATTACHED_FILE="$1"
                ;;
            -s)
                SEARCH="true"
                ;;
            -v)
                VERBOSE="true"
                ;;
            -i)
                get_models_info
                exit
                ;;
            *)  PROMPT="$1"
        esac
        if [ $# -ge 1 ]; then
            shift
        fi
    done

    jq -R --null-input \
    --arg model "$MODEL" \
    --arg glow "$USE_GLOW" \
    --arg file "$ATTACHED_FILE" \
    --arg search "$SEARCH" \
    --arg verbose "$VERBOSE" \
    --arg prompt "$PROMPT" \
    '{
        model: $model,
        glow: $glow,
        attached_File: $file,
        search_enabled: $search,
        verbose: $verbose,
        prompt: $prompt
    }' | base64
}

main() {
    # Clean up any temporary files on exit
    for i in $(find /var/folders -regex ".*ask\.google.*" 2>/dev/null); do
        rm "$i" 2>/dev/null
    done

    # ---------------------------
    # Environment Check
    # ---------------------------
    if [[ -z "$GOOGLE_API_KEY" ]]; then
        echo "\nError: GOOGLE_API_KEY environment variable may not be set." >&2
        exit 1
    fi
    if [[ -z "$(jq --null-input '{}')" ]]; then
        echo "\nError: Check jq is installed and accessible.\n" >&2
        exit 1
    fi
    if [[ -z "$(which curl)" ]]; then
        echo "\nError: Check curl is installed and accessible.\n" >&2
        exit 1
    fi

    # Check that some input is provided
    # If no arguments are provided, check if stdin is not empty or a pipe
    # If stdin is empty and no arguments are provided, show usage
    # and exit with an error
    if [[ $# -eq 0  && ! -s /dev/stdin &&  ! -p /dev/stdin ]]; then
        usage
        exit 1
    fi

    # ---------------------------
    # Configuration & Constants
    # ---------------------------
    local PARAMS="$(parse_arguments $@)"
    local USE_GLOW="$(echo "$PARAMS" | base64 --decode | jq -r '.glow')"
    local MODEL="$(echo "$PARAMS" | base64 --decode | jq -r '.model')"
    local ATTACHED_FILE="$(echo "$PARAMS" | base64 --decode | jq -r '.attached_File')"
    local VERBOSE="$(echo "$PARAMS" | base64 --decode | jq -r '.verbose')"
    local SEARCH="$(echo "$PARAMS" | base64 --decode | jq -r '.search_enabled')"
    local PROMPT="$(echo "$PARAMS" | base64 --decode | jq -r '.prompt')"

    [ "$VERBOSE" = "true" ] && echo "\nParsed parameters: $(echo "$PARAMS" | base64 --decode)\n" >&2

    if [[ -s /dev/stdin || -p /dev/stdin ]]; then
        if [[ -z "$PROMPT" ]]; then
            PROMPT="$(cat -)"
        else
            PROMPT="$PROMPT\n$(cat -)"
        fi
    fi

    if [ -z "$PROMPT" ]; then
        echo "Error: No prompt provided"
        usage
        exit 1
    fi

    if [[ -n "$ATTACHED_FILE" ]]; then
        [[ "$VERBOSE" = "true" ]] && echo "Sending prompt with attached file to Gemini API..." >&2
        RESPONSE="$(send_prompt_with_file_to_gemini "$(echo $PROMPT | base64)" "$SEARCH" "$ATTACHED_FILE" "$MODEL" "$VERBOSE")"
    else
        [ "$VERBOSE" = "true" ] && echo "Sending prompt to Gemini API..." >&2
        RESPONSE="$(send_prompt_to_gemini "$(echo $PROMPT | base64)" "$SEARCH" "$MODEL" "$VERBOSE")"
    fi

    # If glow is enabled, pipe the output to glow
    if [ "$USE_GLOW" = "true" ]; then
        echo "$RESPONSE" | base64 --decode | glow
    else
        [ "$VERBOSE" = "true" ] && echo -n "\nMessage:\n\n\t" >&2
        echo "$RESPONSE" | base64 --decode
    fi
}

# ---------------------------
# Entry Point
# ---------------------------
main $@