#!/usr/bin/env zsh

send_prompt_to_gemini() {
    local prompt="$1"
    local use_markdown_table="$2"
    local model="$3"
    local api_key="$GOOGLE_API_KEY"
    local api_version

    # Determine API version based on model
    case "$model" in
        gemini-1.5-*) api_version="v1" ;;
        *) api_version="v1beta" ;;
    esac

    local api_url="https://generativelanguage.googleapis.com/${api_version}/models/${model}:generateContent?key=$api_key"

    local encoded_prompt=$(echo -n "$prompt" | base64)

    local response=$(curl -s -X POST "$api_url" \
        -H "Content-Type: application/json" \
        -d '{
            "contents": [{
                "parts": [
                    {
                        "inline_data": {
                            "mime_type":"text/plain",
                            "data": "'"$encoded_prompt"'"
                        }
                    }
                ]
            }]
        }' | base64)

    local text_response=$(echo "$response" | base64 --decode | jq -r '.candidates[0].content.parts[0].text')
    local safety_ratings=$(echo "$response" | base64 --decode | jq -r '.candidates[0].finishReason')

    if [ "$use_markdown_table" = "true" ]; then
        echo "| Generated Content |"
        echo "|-------------------|"
        echo "| $text_response    |"
        echo
        echo "| Safety Ratings    |"
        echo "|-------------------|"
        echo "$safety_ratings" | while read -r line; do
            echo "| $line |"
        done
    else
       echo "$text_response"
    fi
}

if [ $# -eq 0  -a ! -p /dev/stdin ]; then
    echo "Usage: $0 <prompt> [-m <model name>] [-g] [--glow] [--markdown]"
    echo "  -m <model name>: Specify the model (e.g., gemini-2.0-flash, gemini-1.5-pro, etc.)"
    echo "  Supported models: gemini-2.0-flash, gemini-2.0-flash-lite, gemini-1.5-flash, gemini-1.5-flash-8b, gemini-1.5-pro"
    exit 1
fi

use_markdown_table="false"
use_glow="false"
prepend_guidelines="false"
model="gemini-2.0-flash"  # Default model

guidelines="\t•\tWrite a commit message; use rules: Plaintext only, no markdown, Focus on readability\n\nSubject line under 50 characters (short summary).\n\t•\tBody lines wrapped at 72 characters each (explanatory details).  When provided a status only focus on staged changes.  Changes below:\n\n"

while [ "$#" -gt 0 ]; do
    case "$1" in
        -m) 
            shift
            case "$1" in
                gemini-2.0-flash) model="gemini-2.0-flash" ;;
                gemini-2.0-flash-lite) model="gemini-2.0-flash-lite" ;;
                gemini-1.5-flash) model="gemini-1.5-flash" ;;
                gemini-1.5-flash-8b) model="gemini-1.5-flash-8b" ;;
                gemini-1.5-pro) model="gemini-1.5-pro" ;;
                "") 
                    echo "Error: -m requires a model name"
                    exit 1
                    ;;
                *) 
                    echo "Error: Unsupported model '$1'"
                    echo "Supported models: gemini-2.0-flash, gemini-2.0-flash-lite, gemini-1.5-flash, gemini-1.5-flash-8b, gemini-1.5-pro"
                    exit 1
                    ;;
            esac
            ;;
        --markdown) use_markdown_table="true" ;;
        --glow) use_glow="true" ;;
        -g) prepend_guidelines="true"
            shift
            if [ -n "$1" ]; then
                prompt="$1"
            else
                read prompt
                while IFS= read line; do
                  prompt="${prompt}${line}"
                done
            fi
            ;;
        *)  prompt="$1"
    esac
    if [ $# -ge 1 ]; then
      shift
    fi
done

if [ "$prepend_guidelines" = "false" -a -p /dev/stdin ]; then
  while read line; do
    prompt="$prompt$line\n"
  done
fi

if [ -z "$prompt" ]; then
    echo "Error: No prompt provided"
    echo "Usage: $0 <prompt> [-m <model name>] [-g] [--glow] [--markdown]"
    echo "  Supported models: gemini-2.0-flash, gemini-2.0-flash-lite, gemini-1.5-flash, gemini-1.5-flash-8b, gemini-1.5-pro"
    exit 1
fi

final_prompt="$prompt"
if [ "$prepend_guidelines" = "true" ]; then
    final_prompt="$guidelines$final_prompt"
fi

if [ "$use_glow" = "true" ]; then
    send_prompt_to_gemini "$final_prompt" "$use_markdown_table" "$model" | glow
else
    send_prompt_to_gemini "$final_prompt" "$use_markdown_table" "$model"
fi
