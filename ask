#!/usr/bin/env zsh

# Function to display help
usage() {
    echo "Usage: $0 <prompt> [-m <model name>] [-g] [--glow] [--markdown] [-f <attached_File>]"
    echo "  <prompt>: The text prompt to send to the Gemini API.  If -g is used, this is the initial prompt."
    echo "  -m <model name>: Specify the model (e.g., gemini-2.0-flash, gemini-1.5-pro, etc.)"
    echo "  Supported models: gemini-2.0-flash, gemini-2.0-flash-lite, gemini-1.5-flash, gemini-1.5-flash-8b, gemini-1.5-pro"
    echo "  -g: Prepend guidelines to the prompt.  If used, you can provide an initial prompt as the next argument."
    echo "  --glow: Use glow to display the output."
    echo "  --markdown: Use markdown table format for the output."
    echo "  -f <attached_File>:  Path to a file to include in the request."
    echo "  -i: List all models along with their details"
    exit 1
}

#!/usr/bin/env zsh

get_models_info() {
    local api_key="$GOOGLE_API_KEY"
    curl -s https://generativelanguage.googleapis.com/v1beta/models\?key\=$api_key | jq
}

send_prompt_to_gemini() {
    local prompt="$1"
    local use_markdown_table="$2"
    local model="$3"
    local attached_File="$4"
    local search_enabled="$5"

    local api_key="$GOOGLE_API_KEY"
    local api_version

    case "$model" in
        gemini-1.5-*) api_version="v1" ;;
        *) api_version="v1beta" ;;
    esac

    local api_url="https://generativelanguage.googleapis.com/${api_version}/models/${model}:generateContent?key=$api_key"

    local parts_array=()

    # Add prompt
    local encoded_prompt=$(echo -n "$prompt" | base64)
    parts_array+=("{\"inline_data\": {\"mime_type\":\"text/plain\", \"data\":\"$encoded_prompt\"}}")

    # Add PDF file if provided
    if [ -n "$attached_File" ]; then
        if [ ! -f "$attached_File" ]; then
            echo "Error: PDF file not found: $attached_File" >&2
            return 1
        fi
        local pdf_base64=$(base64 -i "$attached_File" | tr -d '\r\n')
        parts_array+=("{\"inline_data\": {\"mime_type\":\"$(file -b --mime-type "$attached_File")\", \"data\":\"$pdf_base64\"}}")
    fi

    local request_body
    # Construct request
    if [ "$search_enabled" = "true" ]; then
        request_body="{\"contents\":[{\"parts\":[${(j:, :)parts_array}]}],\"tools\": [{\"google_search\": {}}]}"
     else
        request_body="{\"contents\":[{\"parts\":[${(j:, :)parts_array}]}]}"
    fi

    echo "$request_body" > ".tmp_file"
    # Send request and base64 encode response
    local response=$(curl -s -X POST "$api_url" \
        -H "Content-Type: application/json" \
        --data-binary "@.tmp_file" | base64)

    rm .tmp_file

    if ! echo "$response" | base64 --decode | jq . >/dev/null 2>&1; then
        echo "Invalid JSON response:" >&2
        echo "$decoded_response" >&2
        return 1
    fi
    
    if [ "$text_response" = "null" ]; then
      echo "Finish Result: $(echo "$response" | base64 --decode | jq)"
      return 1
    fi

    local text_response=$(echo "$response" | base64 --decode | jq -r '.candidates[0].content.parts[] | .text' 2>/dev/null)
    local safety_ratings=$(echo "$response" | base64 --decode | jq -r '.candidates[0].finishReason' 2>/dev/null)

    echo "$response" | base64 --decode | jq > /tmp/.tmp

    if [ -z "$text_response" ]; then
        echo "No text response received." >&2
        return 1
    fi

    if [ "$use_markdown_table" = "true" ]; then
        echo "| Generated Content |"
        echo "|-------------------|"
        echo "| $text_response |"
        echo
        echo "| Finish Reason |"
        echo "|---------------|"
        echo "| $safety_ratings |"
    else
        echo "$text_response"
    fi
}

if [[ $# -eq 0  && (! -s /dev/stdin &&  ! -p /dev/stdin) ]]; then
    usage
    exit 1
fi

use_markdown_table="false"
use_glow="false"
prepend_guidelines="false"
model="gemini-2.0-flash"  # Default model
attached_File="" # Initialize attached_File
VERBOSE="false"
search_level="false"

guidelines="  •  Write a commit message; use rules: Plaintext only, no markdown, Focus on readability

Subject line under 50 characters (short summary).
  •  Body lines wrapped at 72 characters each (explanatory details).  When provided a status only focus on staged changes. DO NOT WRAP IN CODEBLOCK. Changes below:

"

while [ "$#" -gt 0 ]; do
    case "$1" in
        -m)
            shift
            case "$1" in
                gemini-2.0-flash) model="gemini-2.0-flash" ;;
                gemini-2.0-flash-lite) model="gemini-2.0-flash-lite" ;;
                gemini-1.5-flash) model="gemini-1.5-flash" ;;
                gemini-1.5-flash-8b) model="gemini-1.5-flash-8b" ;;
                gemini-1.5-pro) model="gemini-1.5-pro" ;;
                gemini-exp-1206) model="gemini-exp-1206";;
                "")
                    echo "Error: -m requires a model name"
                    exit 1
                    ;;
                *)
                    echo "Error: Unsupported model '$1'"
                    echo "Supported models: gemini-2.0-flash, gemini-2.0-flash-lite, gemini-1.5-flash, gemini-1.5-flash-8b, gemini-1.5-pro"
                    exit 1
                    ;;
            esac
            ;;
        --markdown) use_markdown_table="true" ;;
        --glow) use_glow="true" ;;
        -g) prepend_guidelines="true"
            shift
            if [ -n "$1" ]; then
                prompt="$1"
            else
                read prompt
                while IFS= read line; do
                    prompt="${prompt}${line}"
                done
            fi
            ;;
        -f) # Handle the -f option
            shift
            attached_File="$1"
            ;;
        -s)
            search_enabled="true"
            ;;
        -v)
            VERBOSE="true"
            ;;
        -i)
            get_models_info
            exit
            ;;
        *)  prompt="$1"
    esac
    if [ $# -ge 1 ]; then
        shift
    fi
done

if [[ "$prepend_guidelines" == "false" && ( -p /dev/stdin || -s /dev/stdin ) ]]; then
  while IFS= read -r line; do
    prompt+="$line"
  done
fi

if [ -z "$prompt" ]; then
    echo "Error: No prompt provided"
    usage
    exit 1
fi

final_prompt="$prompt"
if [ "$prepend_guidelines" = "true" ]; then
    final_prompt="$guidelines$final_prompt"
fi

if [ "$use_glow" = "true" ]; then
    if ! send_prompt_to_gemini "$final_prompt" "$use_markdown_table" "$model" "$attached_File" "$search_enabled"; then
        exit 1 # Exit if send_prompt_to_gemini failed
    fi
    glow
else
    if ! send_prompt_to_gemini "$final_prompt" "$use_markdown_table" "$model" "$attached_File" "$search_enabled"; then
        exit 1 # Exit if send_prompt_to_gemini failed
    fi
fi

